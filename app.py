from flask import Flask, request, jsonify, render_template, send_file
from google import genai
from google.genai.types import GenerateContentConfig, Modality
from PIL import Image
from io import BytesIO
import os
import base64
from werkzeug.utils import secure_filename
import io
from datetime import datetime

app = Flask(__name__)
app.config['UPLOAD_FOLDER'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 5 * 1024 * 1024  # 5MB limit
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg', 'gif'}
app.config['GENERATED_FOLDER'] = 'generated'

# Configure Google Gemini API
API_KEY = "AIzaSyBMS4DnmOwG1BM8S_AKzMr_Skulu1qzUbs"
client = genai.Client(api_key=API_KEY)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/generate_poster', methods=['POST'])
def generate_poster():
    try:
        # Check if file was uploaded
        if 'product_image' not in request.files:
            return jsonify({'error': 'No file uploaded'}), 400
        
        file = request.files['product_image']
        if file.filename == '':
            return jsonify({'error': 'No file selected'}), 400
        
        # Get product description and style preferences
        description = request.form.get('description', '')
        style = request.form.get('style', 'Modern')
        background = request.form.get('background', 'White')
        
        if file and allowed_file(file.filename):
            # Read image file
            image_data = file.read()
            img = Image.open(io.BytesIO(image_data))
            
            # Prepare prompt for Google Gemini
            prompt = f"""
            Create a professional product poster for marketing purposes.
            
            Product Description: {description}
            Style: {style}
            Background Preference: {background}
            
            Generate a visually appealing poster that highlights the product's features,
            includes appropriate text placement, and follows modern design principles.
            The poster should be suitable for both digital and print marketing.
            """
            
            # Call Gemini 2.5 Flash Image Preview for editing
            response = client.models.generate_content(
                model="gemini-2.5-flash-image-preview",
                contents=[img, prompt],
                config=GenerateContentConfig(response_modalities=[Modality.TEXT, Modality.IMAGE]),
            )
            
            # Extract the generated image from the response
            generated_image = None
            for part in response.candidates[0].content.parts:
                if part.inline_data:
                    generated_image = Image.open(BytesIO(part.inline_data.data))
                    break
            
            if generated_image:
                # Save the generated image
                if not os.path.exists(app.config['GENERATED_FOLDER']):
                    os.makedirs(app.config['GENERATED_FOLDER'])
                
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"poster_{timestamp}.png"
                filepath = os.path.join(app.config['GENERATED_FOLDER'], filename)
                generated_image.save(filepath)
                
                result = {
                    'success': True,
                    'message': 'Poster generated successfully!',
                    'image_url': f'/generated/{filename}'
                }
                
                return jsonify(result)
            else:
                return jsonify({'error': 'No image was generated by the AI'}), 500
                
        else:
            return jsonify({'error': 'Invalid file type'}), 400
            
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@app.route('/generated/<filename>')
def serve_generated_image(filename):
    return send_file(os.path.join(app.config['GENERATED_FOLDER'], filename))

if __name__ == '__main__':
    if not os.path.exists(app.config['UPLOAD_FOLDER']):
        os.makedirs(app.config['UPLOAD_FOLDER'])
    if not os.path.exists(app.config['GENERATED_FOLDER']):
        os.makedirs(app.config['GENERATED_FOLDER'])
    app.run(debug=True)